"scales",
"stargazer",
"grid",
"sandwich",
"lmtest",
"reshape2",
"RColorBrewer",
"googledrive",
"ggthemes",
"kableExtra",
"knitr",
"wordcloud",
"tidytext",
"stringr",
"broom",
"labelled",
"lubridate",
"data.table")
# Loading all the packages
invisible(lapply(pkgs,library,character.only=TRUE))
rm(miss_pkgs)
rm(pkgs)
final_df <- read_csv("GROW_Final_Dataset.csv")
# Adding market variables (for fixed effects)
# bl_raw <- read_dta("bl_samplegrow_deid.dta")
# market_variable <- bl_raw %>% select(w_market, id)
# final_df<- final_df %>% left_join(market_variable, by = "id")
# Encoding for control variables
###############################
##### Making sex numeric ######
###############################
# final_df <- final_df|>
# mutate(bl_sex_label_1 = ifelse(bl_sex_label_1 == "Female", 1, 0))
################################################
##### Encoding marital status numerically ######
################################################
# final_df <- final_df|>
# mutate(bl_marital_status_1 = case_when(bl_marital_status_1 == "Married monogamous" ~ 1, bl_marital_status_1 == "Married polygamous" ~ 2, bl_marital_status_1 == "Cohabiting" ~ 3, bl_marital_status_1 == "Divorced/ Separated" ~ 4, bl_marital_status_1 == "Widow/ Widower" ~ 5, bl_marital_status_1 == "Never married" ~ 6))
# write_csv(final_df, file.path(getwd(), "GROW_Final_Dataset.csv"))
# adding h_work variable for the baseline
# bl <- read_csv("labor_supply_base_df.csv")
# final_df <- final_df %>% left_join(bl, by = "id")
# final_df <- final_df %>% rename(bl_h_work = h_work)
# write_csv(final_df, "GROW_Final_Dataset.csv")
# final_df <- read_csv("GROW_Final_Dataset.csv")
# Checking midline labor supply response rate
ml_response_rates <- final_df %>%
group_by(AnyChildcare) %>%
summarise(
response_rate = mean(!is.na(ml_h_work)),
n_responses = sum(!is.na(ml_h_work)),
n_total = n()
)
el_response_rates <- final_df %>%
group_by(AnyChildcare) %>%
summarise(
response_rate = mean(!is.na(el_h_work)),
n_responses = sum(!is.na(el_h_work)),
n_total = n()
)
print(ml_response_rates)
print(el_response_rates)
# STEP 2: Calculate the DIFFERENTIAL ATTRITION between groups
# midline
ml_response_rate_control <- 0.8857
ml_response_rate_treatment <- 0.9257
ml_differential_rate <- (ml_response_rate_treatment - ml_response_rate_control)*100
# endline
# Response rates BY group
el_response_rate_control <- 0.7738
el_response_rate_treatment <- 0.8460
el_differential_rate <- (el_response_rate_treatment - el_response_rate_control)*100
print(ml_differential_rate)
print(el_differential_rate)
# STEP 3: Calculate the PROPORTION to TRIM from the group with less attrition
# We should calculate using the proportion of the group with less attrition that
# responded -> from OH!
ml_response_rate_treatment*100 # 92.57
el_response_rate_treatment*100 # 84.6
ml_trim_proportion <- ml_differential_rate / 92.57
el_trim_proportion <- el_differential_rate / 84.6 # the proportion group with less attrition is treatment
print(ml_trim_proportion) # we need to trim 4.321% of the treatment group
print(el_trim_proportion)  # we need to trim 8.534% of the treatment group
# STEP 3.1: Lets see how many observations we should trim to get the proportion correct
ml_trim_count_treatment <- ml_response_rates %>%
filter(AnyChildcare == 1) %>%
mutate(trim_count = ceiling(ml_trim_proportion * n_responses)) %>%
pull(trim_count)
ml_trim_count_treatment # we should trim 23 for the midline
el_trim_count_treatment <- el_response_rates %>%
filter(AnyChildcare == 1) %>%
mutate(trim_count = ceiling(el_trim_proportion * n_responses)) %>%
pull(trim_count)
el_trim_count_treatment # we should trim 40 for the endline
# STEP 4: Trimming time!
# Ensure reproducibility
set.seed(123)
# Create copies of the dataframe for trimming
trimmed_lower <- final_df
trimmed_upper <- final_df
# Trimming: Helper function to get global indices
get_global_indices <- function(data, condition, column, trim_count, decreasing = FALSE) {
# Subset global indices for rows satisfying the condition
subset_indices <- which(condition)
# Order the specified column within the subset
ordered_indices <- order(data[[column]][condition], decreasing = decreasing, na.last = NA)
# Select the top `trim_count` indices and map them back to global indices
subset_indices[ordered_indices[1:trim_count]]
}
# 1. For the upper bound, set the smallest values in the treatment group (AnyChildcare == 1) to NA
ml_lowest_indices <- get_global_indices(
data = final_df,
condition = final_df$AnyChildcare == 1,
column = "ml_h_work",
trim_count = ml_trim_count_treatment
)
trimmed_upper$ml_h_work[ml_lowest_indices] <- NA
el_lowest_indices <- get_global_indices(
data = final_df,
condition = final_df$AnyChildcare == 1,
column = "el_h_work",
trim_count = el_trim_count_treatment
)
trimmed_upper$el_h_work[el_lowest_indices] <- NA
# 2. For the lower bound, set the largest values in the treatment group (AnyChildcare == 1) to NA
ml_highest_indices <- get_global_indices(
data = final_df,
condition = final_df$AnyChildcare == 1,
column = "ml_h_work",
trim_count = ml_trim_count_treatment,
decreasing = TRUE
)
trimmed_lower$ml_h_work[ml_highest_indices] <- NA
el_highest_indices <- get_global_indices(
data = final_df,
condition = final_df$AnyChildcare == 1,
column = "el_h_work",
trim_count = el_trim_count_treatment,
decreasing = TRUE
)
trimmed_lower$el_h_work[el_highest_indices] <- NA
# Check trimmed dataframes
sum(is.na(trimmed_lower$ml_h_work)) # 89 of NA from attrition + 23 from trimming
sum(is.na(trimmed_upper$ml_h_work)) # 89 of NA from attrition + 23 from trimming
sum(is.na(trimmed_lower$el_h_work)) # 180 of NA from attrition + 40 from trimming
sum(is.na(trimmed_upper$el_h_work)) # 180 of NA from attrition + 40 from trimming
# Checking midline labor supply response rate
ml_response_rates <- final_df %>%
group_by(rct) %>%
summarise(
response_rate = mean(!is.na(ml_h_work)),
n_responses = sum(!is.na(ml_h_work)),
n_total = n()
)
el_response_rates <- final_df %>%
group_by(rct) %>%
summarise(
response_rate = mean(!is.na(el_h_work)),
n_responses = sum(!is.na(el_h_work)),
n_total = n()
)
print(ml_response_rates)
print(el_response_rates)
# STEP 2: Calculate the DIFFERENTIAL ATTRITION between groups
# midline
ml_response_rate_control <- 0.8857
ml_response_rate_treatment1 <- 0.9104
ml_response_rate_treatment2 <- 0.9414
# endline
# Response rates BY group
el_response_rate_control <- 0.7738
el_response_rate_treatment1 <- 0.8244
el_response_rate_treatment2 <- 0.8681
# Differential attrition rates
ml_differential_rate_treatment1 <- (ml_response_rate_treatment1 - ml_response_rate_control)*100
ml_differential_rate_treatment2 <- (ml_response_rate_treatment2 - ml_response_rate_control)*100
el_differential_rate_treatment1 <- (el_response_rate_treatment1 - el_response_rate_control)*100
el_differential_rate_treatment2 <- (el_response_rate_treatment2 - el_response_rate_control)*100
print(ml_differential_rate_treatment1)
print(ml_differential_rate_treatment2)
print(el_differential_rate_treatment1)
print(el_differential_rate_treatment2)
# STEP 3: Calculate the PROPORTION to TRIM from the group with less attrition
# midline
# Proportions to trim
ml_response_rate_treatment1*100 # 91.04
ml_response_rate_treatment2*100 # 94.14
el_response_rate_treatment1*100 # 82.44
el_response_rate_treatment2*100 # 86.81
ml_trim_proportion_treatment1 <- ml_differential_rate_treatment1 / 91.04
ml_trim_proportion_treatment1
ml_trim_proportion_treatment2 <- ml_differential_rate_treatment2 / 94.14
ml_trim_proportion_treatment2
# endline
# Proportions to trim
el_trim_proportion_treatment1 <- el_differential_rate_treatment1 / 82.44
el_trim_proportion_treatment1
el_trim_proportion_treatment2 <- el_differential_rate_treatment2 / 86.81
el_trim_proportion_treatment2
# STEP 3.1: Calculate the number of observations to trim
# midline
ml_trim_count_treatment1 <- ml_response_rates %>%
filter(rct == "Market Treatment") %>%
mutate(trim_count = ceiling(ml_trim_proportion_treatment1 * n_responses)) %>%
pull(trim_count)
ml_trim_count_treatment1
ml_trim_count_treatment2 <- ml_response_rates %>%
filter(rct == "Community Treatment") %>%
mutate(trim_count = ceiling(ml_trim_proportion_treatment2 * n_responses)) %>%
pull(trim_count)
ml_trim_count_treatment2
# endline
el_trim_count_treatment1 <- el_response_rates %>%
filter(rct == "Market Treatment") %>%
mutate(trim_count = ceiling(el_trim_proportion_treatment1 * n_responses)) %>%
pull(trim_count)
el_trim_count_treatment1
el_trim_count_treatment2 <- el_response_rates %>%
filter(rct == "Community Treatment") %>%
mutate(trim_count = ceiling(el_trim_proportion_treatment2 * n_responses)) %>%
pull(trim_count)
el_trim_count_treatment2
# STEP 4: Trimming time!
# Set seed for reproducibility
set.seed(123)
# Create trimmed copies of the dataframe
trimmed_separated_lower <- final_df
trimmed_separated_upper <- final_df
# Helper function to get global indices
get_global_indices <- function(data, condition, column, trim_count, decreasing = FALSE) {
# Subset global indices for rows satisfying the condition
subset_indices <- which(condition)
# Order the specified column within the subset
ordered_indices <- order(data[[column]][condition], decreasing = decreasing, na.last = NA)
# Select the top `trim_count` indices and map them back to global indices
subset_indices[ordered_indices[1:min(trim_count, length(ordered_indices))]]
}
# 1. Treatment 1 (Market Treatment)
# Upper Bound (smallest values)
ml_lowest_indices_t1 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Market Treatment",
column = "ml_h_work",
trim_count = ml_trim_count_treatment1
)
trimmed_separated_upper$ml_h_work[ml_lowest_indices_t1] <- NA
el_lowest_indices_t1 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Market Treatment",
column = "el_h_work",
trim_count = el_trim_count_treatment1
)
trimmed_separated_upper$el_h_work[el_lowest_indices_t1] <- NA
# Lower Bound (largest values)
ml_highest_indices_t1 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Market Treatment",
column = "ml_h_work",
trim_count = ml_trim_count_treatment1,
decreasing = TRUE
)
trimmed_separated_lower$ml_h_work[ml_highest_indices_t1] <- NA
el_highest_indices_t1 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Market Treatment",
column = "el_h_work",
trim_count = el_trim_count_treatment1,
decreasing = TRUE
)
trimmed_separated_lower$el_h_work[el_highest_indices_t1] <- NA
# 2. Treatment 2 (Community Treatment)
# Upper Bound (smallest values)
ml_lowest_indices_t2 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Community Treatment",
column = "ml_h_work",
trim_count = ml_trim_count_treatment2
)
trimmed_separated_upper$ml_h_work[ml_lowest_indices_t2] <- NA
el_lowest_indices_t2 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Community Treatment",
column = "el_h_work",
trim_count = el_trim_count_treatment2
)
trimmed_separated_upper$el_h_work[el_lowest_indices_t2] <- NA
# Lower Bound (largest values)
ml_highest_indices_t2 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Community Treatment",
column = "ml_h_work",
trim_count = ml_trim_count_treatment2,
decreasing = TRUE
)
trimmed_separated_lower$ml_h_work[ml_highest_indices_t2] <- NA
el_highest_indices_t2 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Community Treatment",
column = "el_h_work",
trim_count = el_trim_count_treatment2,
decreasing = TRUE
)
trimmed_separated_lower$el_h_work[el_highest_indices_t2] <- NA
# Check the number of NAs added from trimming
sum(is.na(trimmed_separated_lower$ml_h_work)) # 89 of NA from attrition + 23 trimming
sum(is.na(trimmed_separated_upper$ml_h_work))  # 89 of NA from attrition + 23 trimming
sum(is.na(trimmed_separated_lower$el_h_work)) # 180 of NA from attrition + 41 trimming
sum(is.na(trimmed_separated_upper$el_h_work)) # 180 of NA from attrition + 41 trimming
library(plm)
library(sandwich)
library(lmtest)
final_df <- final_df %>%
mutate(bl_w_market = as.factor(bl_w_market))
trimmed_lower <- trimmed_lower %>%
mutate(bl_w_market = as.factor(bl_w_market))
trimmed_upper <- trimmed_upper %>%
mutate(bl_w_market = as.factor(bl_w_market))
final_long <- final_df %>%
pivot_longer(
cols = c(bl_h_work, ml_h_work, el_h_work),
names_to = "time",
values_to = "h_work"
) %>%
mutate(
midline = ifelse(time == "ml_h_work", 1, 0),
endline = ifelse(time == "el_h_work", 1, 0),
AnyChildcare_ml = ifelse(AnyChildcare ==1 & time == "bl_h_work", 0, AnyChildcare)
)
panel <- pdata.frame(final_long, index = c("id", "time"))
trimmed_separated_lower <- trimmed_separated_lower %>%
mutate(bl_w_market = as.factor(bl_w_market))
trimmed_separated_upper <- trimmed_separated_upper %>%
mutate(bl_w_market = as.factor(bl_w_market))
library(glmnet)
library(fixest)
# Identify complete cases (i.e., no NAs across variables of interest)
complete_cases <- complete.cases(final_df$ml_h_work,
final_df$AnyChildcare,
final_df$bl_w_age,
final_df$bl_no_education,
final_df$bl_marital_status,
final_df$bl_primary_completed,
final_df$bl_secondary_completed,
final_df$bl_hh_size,
final_df$bl_n_children,
final_df$bl_sex,
final_df$bl_child_age_months_,
final_df$bl_w_market)
# Extract variables for analysis, using only complete cases
# Outcome variable
y <- final_df$ml_h_work[complete_cases]
# Independent variable
d <- final_df$AnyChildcare[complete_cases]
# Create design matrix with all possible covariates (excluding bl_w_market fixed effects)
X_lasso <- model.matrix(~ bl_w_age + bl_no_education + bl_marital_status +
bl_primary_completed + bl_secondary_completed + bl_hh_size +
bl_n_children + bl_sex + bl_child_age_months_ - 1,
data = final_df[complete_cases, ])
# Standardize predictors
X_lasso <- scale(X_lasso)
# LASSO for outcome: identifying predictors in X_lasso most associated with Y
set.seed(123)
lasso_y <- cv.glmnet(X_lasso, y, alpha = 1)
# Extracting coefficients of such predictors
selected_y <- which(coef(lasso_y, s = "lambda.min")[-1] != 0)
# LASSO for treatment: identifying predictors in X_lasso most associated with D
lasso_d <- cv.glmnet(X_lasso, d, alpha = 1, family = "binomial")
# Extracting coefficients of such predictors
selected_d <- which(coef(lasso_d, s = "lambda.min")[-1] != 0)
# Combining indices of predictors associated with Y and D
selected_vars <- union(selected_y, selected_d)
# Subset the design matrix to selected variables
if (length(selected_vars) > 0) {
X_selected <- X_lasso[, selected_vars, drop = FALSE]
# Combine selected predictors and fixed effects
data_combined <- data.frame(
y = y,
d = d,
X_selected,
bl_h_work = final_df$bl_h_work[complete_cases],
bl_w_market = final_df$bl_w_market[complete_cases],
id = final_df$id[complete_cases]
)
# Create regression formula, explicitly including the control variable
formula_pds <- as.formula(paste("y ~ d + bl_h_work +",
paste(colnames(X_selected), collapse = " + "),
"| bl_w_market"))
# Run regression with fixed effects using feols
model_pds <- feols(formula_pds, data = data_combined, cluster = ~id)
# Print the results
print(summary(model_pds))
} else {
print("No variables were selected by LASSO. Model cannot be estimated.")
}
library(glmnet)
library(fixest)
# Identify complete cases (i.e., no NAs across variables of interest)
complete_cases <- complete.cases(final_df$ml_h_work,
final_df$AnyChildcare,
final_df$bl_w_age,
final_df$bl_no_education,
final_df$bl_marital_status,
final_df$bl_primary_completed,
final_df$bl_secondary_completed,
final_df$bl_hh_size,
final_df$bl_n_children,
final_df$bl_sex,
final_df$bl_child_age_months_,
final_df$bl_w_market)
# Extract variables for analysis, using only complete cases
# Outcome variable
y <- final_df$ml_h_work[complete_cases]
# Independent variable
d <- final_df$AnyChildcare[complete_cases]
# Create design matrix with all possible covariates (excluding bl_w_market fixed effects)
X_lasso <- model.matrix(~ bl_w_age + bl_no_education + bl_marital_status +
bl_primary_completed + bl_secondary_completed + bl_hh_size +
bl_n_children + bl_sex + bl_child_age_months_ - 1,
data = final_df[complete_cases, ])
# Standardize predictors
X_lasso <- scale(X_lasso)
# LASSO for outcome: identifying predictors in X_lasso most associated with Y
lasso_y <- cv.glmnet(X_lasso, y, alpha = 1)
# Extracting coefficients of such predictors
selected_y <- which(coef(lasso_y, s = "lambda.min")[-1] != 0)
# LASSO for treatment: identifying predictors in X_lasso most associated with D
lasso_d <- cv.glmnet(X_lasso, d, alpha = 1, family = "binomial")
# Extracting coefficients of such predictors
selected_d <- which(coef(lasso_d, s = "lambda.min")[-1] != 0)
# Combining indices of predictors associated with Y and D
selected_vars <- union(selected_y, selected_d)
# Subset the design matrix to selected variables
if (length(selected_vars) > 0) {
X_selected <- X_lasso[, selected_vars, drop = FALSE]
# Combine selected predictors and fixed effects
data_combined <- data.frame(
y = y,
d = d,
X_selected,
bl_h_work = final_df$bl_h_work[complete_cases],
bl_w_market = final_df$bl_w_market[complete_cases],
id = final_df$id[complete_cases]
)
# Create regression formula, explicitly including the control variable
formula_pds <- as.formula(paste("y ~ d + bl_h_work +",
paste(colnames(X_selected), collapse = " + "),
"| bl_w_market"))
# Run regression with fixed effects using feols
model_pds <- feols(formula_pds, data = data_combined, cluster = ~id)
# Print the results
print(summary(model_pds))
} else {
print("No variables were selected by LASSO. Model cannot be estimated.")
}
## Identify complete cases (i.e., no NAs across variables of interest)
complete_cases <- complete.cases(trimmed_upper$ml_h_work,
trimmed_upper$AnyChildcare,
trimmed_upper$bl_w_age,
trimmed_upper$bl_no_education,
trimmed_upper$bl_marital_status,
trimmed_upper$bl_primary_completed,
trimmed_upper$bl_secondary_completed,
trimmed_upper$bl_hh_size,
trimmed_upper$bl_n_children,
trimmed_upper$bl_sex,
trimmed_upper$bl_child_age_months_,
trimmed_upper$bl_w_market)
# Extract variables for analysis, using only complete cases
# Outcome variable
y <- trimmed_upper$ml_h_work[complete_cases]
# Independent variable
d <- trimmed_upper$AnyChildcare[complete_cases]
# Create design matrix with all possible covariates (excluding bl_w_market fixed effects)
X_lasso <- model.matrix(~ bl_w_age + bl_no_education + bl_marital_status +
bl_primary_completed + bl_secondary_completed + bl_hh_size +
bl_n_children + bl_sex + bl_child_age_months_ - 1,
data = trimmed_upper[complete_cases, ])
# Standardize predictors
X_lasso <- scale(X_lasso)
# LASSO for outcome: identifying predictors in X_lasso most associated with Y
lasso_y <- cv.glmnet(X_lasso, y, alpha = 1)
# Extracting coefficients of such predictors
selected_y <- which(coef(lasso_y, s = "lambda.min")[-1] != 0)
# LASSO for treatment: identifying predictors in X_lasso most associated with D
lasso_d <- cv.glmnet(X_lasso, d, alpha = 1, family = "binomial")
# Extracting coefficients of such predictors
selected_d <- which(coef(lasso_d, s = "lambda.min")[-1] != 0)
# Combining indices of predictors associated with Y and D
selected_vars <- union(selected_y, selected_d)
# Subset the design matrix to selected variables
if (length(selected_vars) > 0) {
X_selected <- X_lasso[, selected_vars, drop = FALSE]
# Combine selected predictors and fixed effects
data_combined <- data.frame(
y = y,
d = d,
X_selected,
bl_h_work = trimmed_upper$bl_h_work[complete_cases],
bl_w_market = trimmed_upper$bl_w_market[complete_cases],
id = trimmed_upper$id[complete_cases]
)
# Create regression formula, explicitly including the control variable
formula_pds <- as.formula(paste("y ~ d + bl_h_work +",
paste(colnames(X_selected), collapse = " + "),
"| bl_w_market"))
# Run regression with fixed effects using feols
model_pds <- feols(formula_pds, data = data_combined, cluster = ~id)
# Print the results
print(summary(model_pds))
} else {
print("No variables were selected by LASSO. Model cannot be estimated.")
}
