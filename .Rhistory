el_highest_indices <- get_global_indices(
data = final_df,
condition = final_df$AnyChildcare == 1,
column = "el_h_work",
trim_count = el_trim_count_treatment,
decreasing = TRUE
)
trimmed_lower$el_h_work[el_highest_indices] <- NA
# Check trimmed dataframes
sum(is.na(trimmed_lower$ml_h_work)) # 89 of NA from attrition + 23 from trimming
sum(is.na(trimmed_upper$ml_h_work)) # 89 of NA from attrition + 23 from trimming
sum(is.na(trimmed_lower$el_h_work)) # 180 of NA from attrition + 40 from trimming
sum(is.na(trimmed_upper$el_h_work)) # 180 of NA from attrition + 40 from trimming
# Checking midline labor supply response rate
ml_response_rates <- final_df %>%
group_by(rct) %>%
summarise(
response_rate = mean(!is.na(ml_h_work)),
n_responses = sum(!is.na(ml_h_work)),
n_total = n()
)
el_response_rates <- final_df %>%
group_by(rct) %>%
summarise(
response_rate = mean(!is.na(el_h_work)),
n_responses = sum(!is.na(el_h_work)),
n_total = n()
)
print(ml_response_rates)
print(el_response_rates)
# STEP 2: Calculate the DIFFERENTIAL ATTRITION between groups
# midline
ml_response_rate_control <- 0.8857
ml_response_rate_treatment1 <- 0.9104
ml_response_rate_treatment2 <- 0.9414
# endline
# Response rates BY group
el_response_rate_control <- 0.7738
el_response_rate_treatment1 <- 0.8244
el_response_rate_treatment2 <- 0.8681
# Differential attrition rates
ml_differential_rate_treatment1 <- (ml_response_rate_treatment1 - ml_response_rate_control)*100
ml_differential_rate_treatment2 <- (ml_response_rate_treatment2 - ml_response_rate_control)*100
el_differential_rate_treatment1 <- (el_response_rate_treatment1 - el_response_rate_control)*100
el_differential_rate_treatment2 <- (el_response_rate_treatment2 - el_response_rate_control)*100
print(ml_differential_rate_treatment1)
print(ml_differential_rate_treatment2)
print(el_differential_rate_treatment1)
print(el_differential_rate_treatment2)
# STEP 3: Calculate the PROPORTION to TRIM from the group with less attrition
# midline
# Proportions to trim
ml_response_rate_treatment1*100 # 91.04
ml_response_rate_treatment2*100 # 94.14
el_response_rate_treatment1*100 # 82.44
el_response_rate_treatment2*100 # 86.81
ml_trim_proportion_treatment1 <- ml_differential_rate_treatment1 / 91.04
ml_trim_proportion_treatment1
ml_trim_proportion_treatment2 <- ml_differential_rate_treatment1 / 94.14
ml_trim_proportion_treatment2
# endline
# Proportions to trim
el_trim_proportion_treatment1 <- el_differential_rate_treatment1 / 82.44
el_trim_proportion_treatment1
el_trim_proportion_treatment2 <- el_differential_rate_treatment1 / 86.81
el_trim_proportion_treatment2
# STEP 3.1: Calculate the number of observations to trim
# midline
ml_trim_count_treatment1 <- ml_response_rates %>%
filter(rct == "Market Treatment") %>%
mutate(trim_count = ceiling(ml_trim_proportion_treatment1 * n_responses)) %>%
pull(trim_count)
ml_trim_count_treatment1
ml_trim_count_treatment2 <- ml_response_rates %>%
filter(rct == "Community Treatment") %>%
mutate(trim_count = ceiling(ml_trim_proportion_treatment2 * n_responses)) %>%
pull(trim_count)
ml_trim_count_treatment2
# endline
el_trim_count_treatment1 <- el_response_rates %>%
filter(rct == "Market Treatment") %>%
mutate(trim_count = ceiling(el_trim_proportion_treatment1 * n_responses)) %>%
pull(trim_count)
el_trim_count_treatment1
el_trim_count_treatment2 <- el_response_rates %>%
filter(rct == "Community Treatment") %>%
mutate(trim_count = ceiling(el_trim_proportion_treatment2 * n_responses)) %>%
pull(trim_count)
el_trim_count_treatment2
# STEP 4: Trimming time!
# Set seed for reproducibility
set.seed(123)
# Create trimmed copies of the dataframe
trimmed_separated_lower <- final_df
trimmed_separated_upper <- final_df
# Helper function to get global indices
get_global_indices <- function(data, condition, column, trim_count, decreasing = FALSE) {
# Subset global indices for rows satisfying the condition
subset_indices <- which(condition)
# Order the specified column within the subset
ordered_indices <- order(data[[column]][condition], decreasing = decreasing, na.last = NA)
# Select the top `trim_count` indices and map them back to global indices
subset_indices[ordered_indices[1:min(trim_count, length(ordered_indices))]]
}
# 1. Treatment 1 (Market Treatment)
# Upper Bound (smallest values)
ml_lowest_indices_t1 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Market Treatment",
column = "ml_h_work",
trim_count = ml_trim_count_treatment1
)
trimmed_separated_upper$ml_h_work[ml_lowest_indices_t1] <- NA
el_lowest_indices_t1 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Market Treatment",
column = "el_h_work",
trim_count = el_trim_count_treatment1
)
trimmed_separated_upper$el_h_work[el_lowest_indices_t1] <- NA
# Lower Bound (largest values)
ml_highest_indices_t1 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Market Treatment",
column = "ml_h_work",
trim_count = ml_trim_count_treatment1,
decreasing = TRUE
)
trimmed_separated_lower$ml_h_work[ml_highest_indices_t1] <- NA
el_highest_indices_t1 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Market Treatment",
column = "el_h_work",
trim_count = el_trim_count_treatment1,
decreasing = TRUE
)
trimmed_separated_lower$el_h_work[el_highest_indices_t1] <- NA
# 2. Treatment 2 (Community Treatment)
# Upper Bound (smallest values)
ml_lowest_indices_t2 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Community Treatment",
column = "ml_h_work",
trim_count = ml_trim_count_treatment2
)
trimmed_separated_upper$ml_h_work[ml_lowest_indices_t2] <- NA
el_lowest_indices_t2 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Community Treatment",
column = "el_h_work",
trim_count = el_trim_count_treatment2
)
trimmed_separated_upper$el_h_work[el_lowest_indices_t2] <- NA
# Lower Bound (largest values)
ml_highest_indices_t2 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Community Treatment",
column = "ml_h_work",
trim_count = ml_trim_count_treatment2,
decreasing = TRUE
)
trimmed_separated_lower$ml_h_work[ml_highest_indices_t2] <- NA
el_highest_indices_t2 <- get_global_indices(
data = final_df,
condition = final_df$rct == "Community Treatment",
column = "el_h_work",
trim_count = el_trim_count_treatment2,
decreasing = TRUE
)
trimmed_separated_lower$el_h_work[el_highest_indices_t2] <- NA
# Check the number of NAs added from trimming
sum(is.na(trimmed_separated_lower$ml_h_work)) # 89 of NA from attrition + 14 trimming
sum(is.na(trimmed_separated_upper$ml_h_work))  # 89 of NA from attrition + 14 trimming
sum(is.na(trimmed_separated_lower$el_h_work)) # 180 of NA from attrition + 29 trimming
sum(is.na(trimmed_separated_upper$el_h_work)) # 180 of NA from attrition + 29 trimming
library(plm)
library(sandwich)
library(lmtest)
final_df <- final_df %>%
mutate(market_fixed_effect = as.factor(market_type))
trimmed_lower <- trimmed_lower %>%
mutate(market_fixed_effect = as.factor(market_type))
trimmed_upper <- trimmed_upper %>%
mutate(market_fixed_effect = as.factor(market_type))
trimmed_separated_lower <- trimmed_separated_lower %>%
mutate(market_fixed_effect = as.factor(market_type))
trimmed_separated_upper <- trimmed_separated_upper %>%
mutate(market_fixed_effect = as.factor(market_type))
# Pooled
formula_0 <- as.formula(
"ml_h_work ~ AnyChildcare + bl_h_work + bl_w_age + bl_no_education +
bl_marital_status_1 + bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 + bl_child_age_months_ + market_fixed_effect"
)
model_0 <- lm(formula_0, data = final_df)
clustered_se_0 <- vcovCL(model_0, cluster = ~id)
summary_0 <- coeftest(model_0, vcov = clustered_se_0)
print(summary_0)
# Separated
formula_00 <- as.formula(
"ml_h_work ~ Market + Community + bl_h_work + bl_w_age + bl_no_education +
bl_marital_status_1 + bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 + bl_child_age_months_ + market_fixed_effect"
)
model_00 <- lm(formula_00, data = final_df)
clustered_se_00 <- vcovCL(model_00, cluster = ~id)
summary_00 <- coeftest(model_00, vcov = clustered_se_00)
print(summary_00)
# midline
formula_1 <- as.formula(
"ml_h_work ~ AnyChildcare + bl_h_work + bl_w_age + bl_no_education +
bl_marital_status_1 + bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 + bl_child_age_months_ + market_fixed_effect"
)
model_1 <- lm(formula_1, data = trimmed_lower)
clustered_se_1 <- vcovCL(model_1, cluster = ~id)
summary_1 <- coeftest(model_1, vcov = clustered_se_1)
print(summary_1)
# Endline
formula_2 <- as.formula(
"el_h_work ~ AnyChildcare + ml_h_work + bl_w_age + bl_no_education +
bl_marital_status_1 + bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 + bl_child_age_months_ + market_fixed_effect"
)
model_2 <- lm(formula_2, data = trimmed_lower)
clustered_se_2 <- vcovCL(model_2, cluster = ~id)
summary_2 <- coeftest(model_2, vcov = clustered_se_2)
print(summary_2)
# Midline
formula_3 <- as.formula(
"ml_h_work ~ AnyChildcare + bl_h_work + bl_w_age + bl_no_education +
bl_marital_status_1 + bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 + bl_child_age_months_ + market_fixed_effect"
)
model_3 <- lm(formula_3, data = trimmed_upper)
clustered_se_3 <- vcovCL(model_3, cluster = ~id)
summary_3 <- coeftest(model_3, vcov = clustered_se_3)
print(summary_3)
# Endline
formula_4 <- as.formula(
"el_h_work ~ AnyChildcare + ml_h_work + bl_w_age + bl_no_education +
bl_marital_status_1 + bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 + bl_child_age_months_ + market_fixed_effect"
)
model_4 <- lm(formula_4, data = trimmed_upper)
clustered_se_4 <- vcovCL(model_4, cluster = ~id)
summary_4 <- coeftest(model_4, vcov = clustered_se_4)
print(summary_4)
# Reshaping the dataset (into the long format) and creating indicators
final_long <- final_df %>%
pivot_longer(
cols = c(bl_h_work, ml_h_work, el_h_work),
names_to = "time",
values_to = "h_work"
) %>%
mutate(
midline = ifelse(time == "ml_h_work", 1, 0),
endline = ifelse(time == "el_h_work", 1, 0),
AnyChildcare_ml = ifelse(AnyChildcare ==1 & time == "bl_h_work", 0, AnyChildcare)
)
panel <- pdata.frame(final_long, index = c("id", "time"))
model_fixed_effect <- plm(
h_work ~ AnyChildcare_ml + midline + endline + AnyChildcare_ml:endline +
bl_w_age + bl_no_education + bl_marital_status_1 +
bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 +
bl_child_age_months_,
model = "within",
data = panel
)
# Clustered standard errors
clustered_se_fixed_effect <- vcovHC(model_fixed_effect, method = "arellano", cluster = "group")
summary_fixed_effect <- coeftest(model_fixed_effect, vcov = clustered_se_fixed_effect)
print(summary_fixed_effect)
trimmed_lower_long <- trimmed_lower %>%
pivot_longer(
cols = c(bl_h_work, ml_h_work, el_h_work),
names_to = "time",
values_to = "h_work"
) %>%
mutate(
midline = ifelse(time == "ml_h_work", 1, 0),
endline = ifelse(time == "el_h_work", 1, 0),
AnyChildcare_ml = ifelse(AnyChildcare ==1 & time == "bl_h_work", 0, AnyChildcare)
)
trimmed_lower_long_panel <- pdata.frame(trimmed_lower_long, index = c("id", "time"))
fixed_lower <- plm(
h_work ~ AnyChildcare_ml + midline + endline + AnyChildcare_ml:endline +
bl_w_age + bl_no_education + bl_marital_status_1 +
bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 +
bl_child_age_months_,
data = trimmed_lower_long_panel,
model = "within"
)
# Clustered standard errors at the individual level
clustered_se_5 <- vcovHC(fixed_lower, method = "arellano", cluster = "group")
# Summary of the model with clustered standard errors
summary_coeftest_5 <- coeftest(fixed_lower, vcov = clustered_se_5)
# Print the summary
print(summary_coeftest_5)
# Reshaping the dataset (into the long format) and creating endline indicator
trimmed_upper_long <- trimmed_upper %>%
pivot_longer(
cols = c(bl_h_work, ml_h_work, el_h_work),
names_to = "time",
values_to = "h_work"
) %>%
mutate(
midline = ifelse(time == "ml_h_work", 1, 0),
endline = ifelse(time == "el_h_work", 1, 0),
AnyChildcare_ml = ifelse(AnyChildcare ==1 & time == "bl_h_work", 0, AnyChildcare)
)
# Fit the regression model
trimmed_upper_long_panel <- pdata.frame(trimmed_upper_long, index = c("id", "time"))
fixed_upper <- plm(
h_work ~ AnyChildcare_ml + midline + endline + AnyChildcare_ml:endline +
bl_w_age + bl_no_education + bl_marital_status_1 +
bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 +
bl_child_age_months_,
data = trimmed_upper_long_panel,
model = "within"
)
# Clustered standard errors at the individual level
clustered_se_6 <- vcovHC(fixed_upper, method = "arellano", cluster = "group")
# Summary of the model with clustered standard errors
summary_coeftest_6 <- coeftest(fixed_upper, vcov = clustered_se_6)
# Print the summary
print(summary_coeftest_6)
# midline
formula_7 <- as.formula(
"ml_h_work ~ Market + Community + bl_h_work + bl_w_age + bl_no_education +
bl_marital_status_1 + bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 + bl_child_age_months_ + market_fixed_effect"
)
model_7 <- lm(formula_7, data = trimmed_separated_lower)
clustered_se_7 <- vcovCL(model_7, cluster = ~id)
summary_7 <- coeftest(model_7, vcov = clustered_se_7)
print(summary_7)
# Endline
formula_8 <- as.formula(
"el_h_work ~ Market + Community + ml_h_work + bl_w_age + bl_no_education +
bl_marital_status_1 + bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 + bl_child_age_months_ + market_fixed_effect"
)
model_8 <- lm(formula_8, data = trimmed_separated_lower)
clustered_se_8 <- vcovCL(model_8, cluster = ~id)
summary_8 <- coeftest(model_8, vcov = clustered_se_8)
print(summary_8)
# Midline
formula_9 <- as.formula(
"ml_h_work ~ Market + Community + bl_h_work + bl_w_age + bl_no_education +
bl_marital_status_1 + bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 + bl_child_age_months_ + market_fixed_effect"
)
model_9 <- lm(formula_9, data = trimmed_separated_upper)
clustered_se_9 <- vcovCL(model_9, cluster = ~id)
summary_9 <- coeftest(model_9, vcov = clustered_se_9)
print(summary_9)
# Endline
formula_10 <- as.formula(
"el_h_work ~ Market + Community + ml_h_work + bl_w_age + bl_no_education +
bl_marital_status_1 + bl_primary_completed + bl_secondary_completed +
bl_hh_size + bl_n_children + bl_sex_label_1 + bl_child_age_months_ + market_fixed_effect"
)
model_10 <- lm(formula_10, data = trimmed_separated_upper)
clustered_se_10 <- vcovCL(model_10, cluster = ~id)
summary_10 <- coeftest(model_10, vcov = clustered_se_10)
print(summary_10)
library(stargazer)
# Generate the LaTeX table
stargazer(
model_0,  # Include the model object
se = list(sqrt(diag(clustered_se_0))),  # Provide clustered standard errors
type = "latex",  # LaTeX output for Overleaf
omit = c("bl_h_work", "bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months"),  # Variables to exclude
covariate.labels = c("Any Childcare", "Market Fixed Effect"),  # Rename variables
dep.var.labels = c("Hours Worked"),  # Dependent variable label
keep.stat = c("n", "rsq"),  # Include selected statistics
align = TRUE,  # Align table for readability
title = "Regression Results for Hours Worked"  # Optional table title
)
stargazer(model_00, type = "latex",
omit = c("bl_h_work", "bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),
se = list(sqrt(diag(clustered_se_00))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq"))
stargazer(model_1, type = "latex",
omit = c("bl_h_work", "bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),
se = list(sqrt(diag(clustered_se_1))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq"))
# Use stargazer to generate LaTeX code for the model output with standard errors
stargazer(model_2, type = "latex",
omit = c("bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),
se = list(sqrt(diag(clustered_se_2))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq"))
stargazer(model_3, type = "latex",
omit = c("bl_h_work", "bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),
se = list(sqrt(diag(clustered_se_3))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq"))
stargazer(model_4, type = "latex",
omit = c("bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),
se = list(sqrt(diag(clustered_se_4))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq"))
stargazer(model_fixed_effect, type = "latex",
omit = c("bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),
se = list(sqrt(diag(clustered_se_fixed_effect))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq"))
# Using Stargazer to generate LaTeX table for the fixed effects model
stargazer(fixed_lower, type = "latex",
se = list(sqrt(diag(clustered_se_5))),  # Clustered standard errors
omit = c("bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),  # Omitting variables
omit.stat = c("LL", "ser", "f"),  # Omit Log-Likelihood, Std. Error, and F-statistics
star.cutoffs = c(0.05, 0.01, 0.001),  # Significance levels
keep.stat = c("n", "rsq"))  # Keep count and R-squared
stargazer(fixed_upper, type = "latex",
se = list(sqrt(diag(clustered_se_6))),  # Clustered standard errors
omit = c("bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),  # Omitting variables
omit.stat = c("LL", "ser", "f"),  # Omit Log-Likelihood, Std. Error, and F-statistics
star.cutoffs = c(0.05, 0.01, 0.001),  # Significance levels
keep.stat = c("n", "rsq"))  # Keep count and R-squared
stargazer(model_7, type = "latex",
omit = c( "bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),
se = list(sqrt(diag(clustered_se_7))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq"))
stargazer(model_8, type = "latex",
omit = c("bl_h_work", "bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),
se = list(sqrt(diag(clustered_se_8))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq"))
stargazer(model_9, type = "latex",
omit = c("bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),
se = list(sqrt(diag(clustered_se_9))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq"))
stargazer(model_10, type = "latex",
omit = c("bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
se = list(sqrt(diag(clustered_se_10))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq"))
stargazer(model_10, type = "latex",
omit = c("bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
se = list(sqrt(diag(clustered_se_10))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq")))
stargazer(model_10, type = "latex",
omit = c("bl_w_age", "bl_no_education",
"bl_marital_status_1", "bl_primary_completed",
"bl_secondary_completed", "bl_hh_size",
"bl_n_children", "bl_sex_label_1", "bl_child_age_months_"),
se = list(sqrt(diag(clustered_se_9))),
omit.stat = c("LL", "ser", "f"),
star.cutoffs = c(0.05, 0.01, 0.001),
keep.stat = c("n", "rsq"))
